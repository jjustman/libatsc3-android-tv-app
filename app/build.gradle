plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '3.5.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.github.triplet.play'

def appVersionCode = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
def appVersion = "1.0.6"

def getCertPropertyCode(propertyName) {
    if (project.hasProperty(propertyName)) {
        return project.property(propertyName)
    } else {
        if (!ext.hasProperty('keystoreProperties')) {
            ext.keystoreProperties = new Properties()
            if (rootProject.file("keystore.properties").exists()) {
                ext.keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
            }
        }

        return keystoreProperties[propertyName]
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId "com.nextgenbroadcast.mobile.tvandroid"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionCode
        versionName appVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue("string", "defaultActionWatch", "com.nextgenbroadcast.mobile.tvandroid.action.watch")
        resValue("string", "nextgenMediaFileProvider", "com.nextgenbroadcast.tv.dash.provider")
        resValue("string", "nextgenMMTContentProvider", "com.nextgenbroadcast.tv.mmt.provider")
        resValue("string", "nextgenServicesGuideProvider", "com.nextgenbroadcast.tv.esg.provider")
        resValue("string", "receiverContentProvider", "com.nextgenbroadcast.tv.content.provider")

        buildConfigField("String", "BugfenderKey", "\"4b6IiAhfyVWJdAgybG0efYzqRUd2PNiA\"")
        buildConfigField("String", "APPLICATION_ID",  "\"com.nextgenbroadcast.mobile.tvandroid\"")

    }

    signingConfigs {
        release {
            storeFile file(getCertPropertyCode('storeFile'))
            storePassword getCertPropertyCode('password')
            keyAlias getCertPropertyCode('keyAlias')
            keyPassword getCertPropertyCode('keyPassword')
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".${appVersionCode}"
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        doNotStrip '**.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libcrypto.so'
        pickFirst 'lib/armeabi-v7a/libcrypto.so'
        pickFirst 'lib/arm64-v8a/libssl.so'
        pickFirst 'lib/armeabi-v7a/libssl.so'
    }

    lintOptions {
        abortOnError false
    }

    buildFeatures {
        viewBinding true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {output ->
            outputFileName = outputFileName.replace(".apk", "-${appVersion}.${appVersionCode}.apk")
        }
    }

    if (project.getProperty('org.gradle.project.use_local_src_middleware_folder').toBoolean()) {
        flavorDimensions "service_type"
        productFlavors {
            embedded {
            }
        }
    }
}

def authJsonFile = project.hasProperty('authJsonFilePath') ? file(authJsonFilePath) : rootProject.file("middleware-service-connection.json")

play {
    serviceAccountCredentials.set(authJsonFile)
    track.set("internal")
    releaseName.set("$appVersion ($appVersionCode)")
    releaseStatus.set(com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT)
    resolutionStrategy.set(com.github.triplet.gradle.androidpublisher.ResolutionStrategy.IGNORE)
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    //TODO: investigate ESG menu behaviour. Auto expend/collapse doesn't work with latest versions
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-alpha2'
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"

    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation 'androidx.activity:activity-ktx:1.2.2'
    implementation 'androidx.fragment:fragment-ktx:1.3.2'

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:18.0.2'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:17.4.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"

    if (project.getProperty('org.gradle.project.use_local_src_middleware_folder').toBoolean()) {
        implementation project(":nextgen-core")
        implementation project(":nextgen-view")
        implementation project(":nextgen-middleware")
        implementation project(":nextgen-player")
        implementation project(":nextgen-dev")
    } else {
        implementation "com.nextgenbroadcast.mobile:nextgen-core:$middlewareVersion"
        implementation "com.nextgenbroadcast.mobile:nextgen-view:$middlewareVersion"
        implementation "com.nextgenbroadcast.mobile:nextgen-middleware:$middlewareVersion"
        implementation "com.nextgenbroadcast.mobile:nextgen-player:$middlewareVersion"
        implementation "com.nextgenbroadcast.mobile:nextgen-dev:$middlewareVersion"
    }

    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-dash:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-daa:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-mmt:$exoplayerVersion"

    implementation 'com.github.bumptech.glide:glide:4.11.0'

    implementation "androidx.media:media:1.2.1"

    implementation 'com.google.android.play:core-ktx:1.7.0'

    implementation 'com.bugfender.sdk:android:3.+'

}